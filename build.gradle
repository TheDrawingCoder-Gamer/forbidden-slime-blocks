plugins {
    id 'fabric-loom' version '0.10-SNAPSHOT'
    id 'maven-publish'
    id 'scala' 
    id 'groovy'
    id 'com.github.jruby-gradle.jar' version '2.0.1'

}


archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

configurations {
    shadow 
    implementation.extendsFrom shadow 
}
dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modApi("net.fabricmc:fabric-language-scala:2.0.0+scala.3.0.2") {
	exclude group: 'net.fabricmc'
    }
    modImplementation files("../fabric-language-groovy/build/libs/fabric-language-groovy+1.1.1-fat.jar")
    compileOnly "org.apache.groovy:groovy:4.0.4"

    implementation "org.jruby:jruby-complete:9.3.4.0"
}
processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}
compileScala {
    classpath = sourceSets.main.compileClasspath 
}
compileGroovy {
    classpath = sourceSets.main.compileClasspath
}
compileJava {
    classpath += files(sourceSets.main.scala.classesDirectory) 
    classpath += files(sourceSets.main.groovy.classesDirectory) 
}
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release = 17
}

java {
    withSourcesJar()
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
    configurations.shadow.each { dep ->
        from(project.zipTree(dep)){
            exclude 'META-INF', 'META-INF/**'
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    repositories {
        // Nothing here right now.
    }
}

jrubyJar {
    initScript library()
}
